{
  "hash": "9521ff7f4d4eebbbbe23167d8c856fcb",
  "result": {
    "markdown": "---\ntitle: \"R Stats Wrapped\"\ndescription: \"After being inspired by the popular end-of-year tradition, Spotify Wrapped, I decided to create my own #RStatsWrapped using .Rmd files from 2022.\"\nauthor: \n  - name: Alex Reed\n    #affiliation: MEDS\ndate: 2022-12-31\ncategories: [R]\ncitation: \n  url: https://reedalexandria.github.io/2022-12-31-rwrapped\nimage: album_cover.png\ndraft: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"show the code\"\n    #code-overflow: wrap\npage-layout: article\nbase_url: https://reedalexandria.github.io\n---\n\n\nSpecial thanks to Nicole Rennie for the inspiration for this blog post.[^1]\n\n[^1]: Nicola Rennie. December 3, 2022. nrennie.rbind.io/blog/2022-12-03-how-to-make-your-own-rstats-wrapped\n\n## Load Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(NCmisc)\nlibrary(janitor)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(showtext)\nlibrary(ggtextures)\nlibrary(png)\nlibrary(cowplot)\n```\n:::\n\n\n## Convert R Markdowns to R scripts\n\nYou can use the `knitr::purl` function to convert .Rmd files into .R scripts. If you prefer using .R scripts, this step is not necessary. To convert multiple files at once, you can create a function using the code below. Alternatively, if you prefer to convert the files manually, you can simply insert the filename for each .Rmd file one at a time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Convert R Markdown to R script\n# knitr::purl(\"filepath/filename.Rmd\")\n```\n:::\n\n\nChoose the directory where your converted .R scripts are located. Use the `list.files` function to create a character vector called `all_files` that contains the names of all files in the directory specified by `file_path` that have an \".R\" or \".r\" file extension.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_path <- (\"/Users/alexreed/Documents/MEDS/Website/reedalexandria.github.io/posts/2022-12-31-rwrapped/data\")\nall_files <- list.files(path = file_path, recursive = TRUE, pattern = \"\\\\.[Rr]$\")\nall_functions <- map(.x = all_files, .f = ~ list.functions.in.file(file.path(file_path, .x)))\n```\n:::\n\n\n## Select your top five packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunc_data <- unlist(all_functions) |>\n  unname() |> \n  tabyl() |> \n  as_tibble() |> \n  rename(func = \"unname(unlist(all_functions))\") |>\n  slice_max(n, n = 5, with_ties = FALSE) \n```\n:::\n\n\n## Find the hex sticker .png for each package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_imgs <- tibble(img = c(\"https://www.r-project.org/logo/Rlogo.png\",\n                       \"https://www.r-project.org/logo/Rlogo.png\",\n                       \"https://ggplot2.tidyverse.org/logo.png\",\n                       \"https://ggplot2.tidyverse.org/logo.png\",\n                       \"https://www.r-project.org/logo/Rlogo.png\"))\n```\n:::\n\n\n## Plotting top functions\n\nFirst, add a font similar to the Spotify font. The font used by Spotify is Spotify Circular.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\"Circular\", \"/Users/alexreed/Downloads/Circular/CircularStd-Medium.otf\")\nshowtext_auto()\n```\n:::\n\n\nUse `ggplot2` to create the top function graphic.\n\n\n::: {.cell fig.dim='[7,8.5]'}\n\n```{.r .cell-code}\ntop_functions <- ggplot() +\n  # add text with the numbers 1 to 5\n  geom_text(data = data.frame(),\n            mapping = aes(x = rep(1, 5),\n                          y = 1:5,\n                          label = paste0(\"#\", 1:5)),\n            colour = \"#00008b\",\n            size = 20,\n            fontface = \"bold\",\n            family = \"Circular\") +\n  # add text with the names of the functions, and the number of times its used\n  geom_text(data = func_data,\n            mapping = aes(x = rep(2.25, 5),\n                          y = 1:5,\n                          label = paste0(func, \"(), \", n, \" times\")),\n            colour = \"#00008b\",\n            hjust = 0,\n            size = 11,\n            fontface = \"bold\",\n            family = \"Circular\") +\n  # add images for each package\n  geom_textured_rect(data = hex_imgs, \n                     aes(xmin = rep(1.5, 5), xmax = rep(2.1, 5),\n                         ymax = 1:5-0.3, ymin = 1:5+0.3, image = img), \n                     lty = \"blank\",\n                     fill=\"transparent\",\n                     nrow = 1,\n                     ncol = 1,\n                     img_width = unit(1, \"null\"),\n                     img_height = unit(1, \"null\"),\n                     position = \"identity\")  +\n  # add title using geom_text() instead of labs()\n  geom_text(data = data.frame(),\n            aes(x = 2.45, y = 0, label = \"My Top Functions\"),\n            colour = \"#00008b\",\n            fontface = \"bold\",\n            hjust = 0.5,\n            size = 14,\n            family = \"Circular\") +\n  # set axis limits and reverse y axis\n  scale_x_continuous(limits = c(0.9, 4)) +\n  scale_y_reverse(limits = c(5.5, -0.2)) +\n  # add a caption\n  labs(caption = \"#RStatsWrapped\") +\n  # set the theme\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#ADD8E6\", colour = \"#ADD8E6\"),\n        panel.background = element_rect(fill = \"#ADD8E6\", colour = \"#ADD8E6\"),\n        plot.margin = margin(40, 15, 10, 15),\n        plot.caption = element_text(colour = \"#46214a\",\n                                  margin = margin(t = 15),\n                                  face = \"bold\",\n                                  hjust = 1,\n                                  size = 30,\n                                  family = \"Circular\"))\n\ntop_functions\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAdd a geometry shape to the background\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ncurve1 <- tibble(x = 1:100) %>% \n  mutate(y = 20 + smooth(cumsum(rnorm(100))))\ninset1 <- ggplot(data = curve1,\n       aes(x = x, y = y)) +\n  geom_area(fill = \"#46214a\") +\n  theme_void() +\n  coord_fixed() +\n  scale_y_reverse()\n```\n:::\n\n\nUsing the `patchwork` package, you can overlay the geometry shape and the function graphic to create a single plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdated <- top_functions + inset_element(inset1, left = -1, right = 1.2, bottom = 0, top = 2.2, align_to = \"full\") &\n  theme(plot.background = element_rect(fill = \"#ADD8E6\", colour = \"#ADD8E6\"),\n        panel.background = element_rect(fill = \"#ADD8E6\", colour = \"#ADD8E6\"),\n        plot.margin = margin(40, 7, 5, 7),\n        plot.caption = element_text(colour = \"#46214a\",\n                                    margin = margin(t = 5),\n                                    face = \"bold\",\n                                    hjust = 1,\n                                    size = 30))\n```\n:::\n\n\nI then created an album cover in Canva. The photo is from a Justin Timberlake concert I attended in Las Vegas, Nevada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalbum <- readPNG(\"/Users/alexreed/Documents/MEDS/Practice/wrapped/album_cover.png\", native = TRUE)\n```\n:::\n\n\nNow, combine the graphic and album cover to complete the #RStatsWrapped graphic.\n\n\n::: {.cell fig.dim='[10,15]'}\n\n```{.r .cell-code}\nggdraw(updated) + \n  draw_image(album,\n             scale = 0.35,\n             halign = 0.5,\n             valign = 0.99)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=960}\n:::\n\n```{.r .cell-code}\n#save final graphic\n#ggsave(\"rwrapped_album.png\", width = 2.5, height = 5, units = \"in\", )\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}